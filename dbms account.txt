
(S1)
1. Find the names of all branches in loan relation.
SELECT DISTINCT branch_name 
FROM Loan;


2. Find all loan numbers for loans made at „Wadia College‟ Branch 
with loan amount > 12000.
SELECT loan_no 
FROM Loan 
WHERE branch_name = 'Wadia College' 
  AND amount > 12000;


3. Find all customers who have a loan from bank. Find their 
names,loan_no and loan amount. 
SELECT Borrower.cust_name, Borrower.loan_no, Loan.amount 
FROM Borrower 
JOIN Loan ON Borrower.loan_no = Loan.loan_no;


4. List all customers in alphabetical order who have loan from 
„Wadia College‟ branch. 
SELECT DISTINCT Borrower.cust_name 
FROM Borrower 
JOIN Loan ON Borrower.loan_no = Loan.loan_no 
WHERE Loan.branch_name = 'Wadia College' 
ORDER BY Borrower.cust_name;


5. Display distinct cities of branch. SELECT DISTINCT branch_city 
FROM Branch;



mysql> CREATE DATABASE bank_db;
Query OK, 1 row affected (0.04 sec)

mysql> USE bank_db;
Database changed
mysql> CREATE TABLE Branch (branch_name VARCHAR(50) PRIMARY KEY,branch_city VARCHAR(50) NOT NULL,assets DECIMAL(15, 2) CHECK (assets >= 0));
Query OK, 0 rows affected (0.06 sec)

mysql> CREATE TABLE Account (acc_no INT PRIMARY KEY,branch_name VARCHAR(50) NOT NULL,balance DECIMAL(10, 2) CHECK (balance >= 0),FOREIGN KEY (branch_name) REFERENCES Branch(branch_name) ON DELETE CASCADE);
Query OK, 0 rows affected (0.07 sec)

mysql> CREATE TABLE Customer (cust_name VARCHAR(50) PRIMARY KEY,cust_street VARCHAR(100),cust_city VARCHAR(50));
Query OK, 0 rows affected (0.06 sec)

mysql> CREATE TABLE Depositor (cust_name VARCHAR(50) NOT NULL,acc_no INT NOT NULL,PRIMARY KEY (cust_name, acc_no),FOREIGN KEY (cust_name) REFERENCES Customer(cust_name) ON DELETE CASCADE,FOREIGN KEY (acc_no) REFERENCES Account(acc_no) ON DELETE CASCADE);
Query OK, 0 rows affected (0.06 sec)

mysql> CREATE TABLE Loan (loan_no INT PRIMARY KEY,branch_name VARCHAR(50) NOT NULL,amount DECIMAL(10, 2) CHECK (amount > 0),FOREIGN KEY (branch_name) REFERENCES Branch(branch_name) ON DELETE CASCADE);
Query OK, 0 rows affected (0.06 sec)

mysql> CREATE TABLE Borrower (cust_name VARCHAR(50) NOT NULL,loan_no INT NOT NULL,PRIMARY KEY (cust_name, loan_no),FOREIGN KEY (cust_name) REFERENCES Customer(cust_name) ON DELETE CASCADE,FOREIGN KEY (loan_no) REFERENCES Loan(loan_no) ON DELETE CASCADE);
Query OK, 0 rows affected (0.07 sec)

mysql> SELECT * FROM Account;
Empty set (0.04 sec)                                                                                                                                    mysql> INSERT INTO Branch (branch_name, branch_city, assets VALUES('Wadia College', 'Pune', 1000000.00),('MG Road', 'Mumbai', 1500000.00),('FC Road', 'Pune', 1200000.00),('Linking Road', 'Mumbai', 1300000.00);
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'VALUES('Wadia College', 'Pune', 1000000.00),('MG Road', 'Mumbai', 1500000.00),('' at line 1
mysql> INSERT INTO Branch (branch_name, branch_city, assets) VALUES
    -> ('Wadia College', 'Pune', 1000000.00),
    -> ('MG Road', 'Mumbai', 1500000.00),
    -> ('FC Road', 'Pune', 1200000.00),
    -> ('Linking Road', 'Mumbai', 1300000.00);
Query OK, 4 rows affected (0.01 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Account (acc_no, branch_name, balance) VALUES
    -> (101, 'Wadia College', 5000.00),
    -> (102, 'MG Road', 12000.00),
    -> (103, 'FC Road', 8000.00),
    -> (104, 'Linking Road', 15000.00);
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Customer (cust_name, cust_street, cust_city) VALUES
    -> ('mukesh', 'MG Road', 'Mumbai'),
    -> ('suresh', 'FC Road', 'Pune'),
    -> ('ramesh', 'Wadia College', 'Pune'),
    -> ('rajesh', 'Linking Road', 'Mumbai');
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Depositor (cust_name, acc_no) VALUES
    -> ('mukesh', 101),
    -> ('suresh', 102),
    -> ('ramesh', 103),
    -> ('rajesh', 104);
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Loan (loan_no, branch_name, amount) VALUES
    -> (201, 'Wadia College', 15000.00),
    -> (202, 'MG Road', 10000.00),
    -> (203, 'FC Road', 20000.00),
    -> (204, 'Wadia College', 25000.00);
Query OK, 4 rows affected (0.04 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> INSERT INTO Borrower (cust_name, loan_no) VALUES
    -> ('mukesh', 201),
    -> ('suresh', 202),
    -> ('ramesh', 203),
    -> ('rajesh', 204);
Query OK, 4 rows affected (0.05 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM Account;
+--------+---------------+----------+
| acc_no | branch_name   | balance  |
+--------+---------------+----------+
|    101 | Wadia College |  5000.00 |
|    102 | MG Road       | 12000.00 |
|    103 | FC Road       |  8000.00 |
|    104 | Linking Road  | 15000.00 |
+--------+---------------+----------+
4 rows in set (0.00 sec)

mysql>
mysql> SELECT * FROM Branch;
+---------------+-------------+------------+
| branch_name   | branch_city | assets     |
+---------------+-------------+------------+
| FC Road       | Pune        | 1200000.00 |
| Linking Road  | Mumbai      | 1300000.00 |
| MG Road       | Mumbai      | 1500000.00 |
| Wadia College | Pune        | 1000000.00 |
+---------------+-------------+------------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Customer;
+-------------+---------------+-----------+
| cust_name   | cust_street   | cust_city |
+-------------+---------------+-----------+
| Alice Brown | Wadia College | Pune      |
| Bob White   | Linking Road  | Mumbai    |
| Jane Smith  | FC Road       | Pune      |
| John Doe    | MG Road       | Mumbai    |
+-------------+---------------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Depositor;
+-------------+--------+
| cust_name   | acc_no |
+-------------+--------+
| John Doe    |    101 |
| Jane Smith  |    102 |
| Alice Brown |    103 |
| Bob White   |    104 |
+-------------+--------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Loan;
+---------+---------------+----------+
| loan_no | branch_name   | amount   |
+---------+---------------+----------+
|     201 | Wadia College | 15000.00 |
|     202 | MG Road       | 10000.00 |
|     203 | FC Road       | 20000.00 |
|     204 | Wadia College | 25000.00 |
+---------+---------------+----------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Borrower;
+-------------+---------+
| cust_name   | loan_no |
+-------------+---------+
| John Doe    |     201 |
| Jane Smith  |     202 |
| Alice Brown |     203 |
| Bob White   |     204 |
+-------------+---------+
4 rows in set (0.00 sec)

mysql> SELECT DISTINCT branch_name
    -> FROM Loan;
+---------------+
| branch_name   |
+---------------+
| FC Road       |
| MG Road       |
| Wadia College |
+---------------+
3 rows in set (0.04 sec)

mysql> SELECT loan_no
    -> FROM Loan
    -> WHERE branch_name = 'Wadia College'
    ->   AND amount > 12000;
+---------+
| loan_no |
+---------+
|     201 |
|     204 |
+---------+
2 rows in set (0.04 sec)

mysql> SELECT Borrower.cust_name, Borrower.loan_no, Loan.amount
    -> FROM Borrower
    -> JOIN Loan ON Borrower.loan_no = Loan.loan_no;
+-------------+---------+----------+
| cust_name   | loan_no | amount   |
+-------------+---------+----------+
| John Doe    |     201 | 15000.00 |
| Jane Smith  |     202 | 10000.00 |
| Alice Brown |     203 | 20000.00 |
| Bob White   |     204 | 25000.00 |
+-------------+---------+----------+
4 rows in set (0.00 sec)

mysql> SELECT DISTINCT Borrower.cust_name
    -> FROM Borrower
    -> JOIN Loan ON Borrower.loan_no = Loan.loan_no
    -> WHERE Loan.branch_name = 'Wadia College'
    -> ORDER BY Borrower.cust_name;
+-----------+
| cust_name |
+-----------+
| Bob White |
| John Doe  |
+-----------+
2 rows in set (0.00 sec)

mysql> SELECT DISTINCT branch_city
    -> FROM Branch;
+-------------+
| branch_city |
+-------------+
| Pune        |
| Mumbai      |
+-------------+
2 rows in set (0.00 sec)


(S2)
2222222222222222222

1. Find all customers who have both account and loan at bank.
SELECT DISTINCT Depositor.cust_name 
FROM Depositor
JOIN Borrower ON Depositor.cust_name = Borrower.cust_name;


2. Find all customers who have an account or loan or both at 
bank. 
SELECT DISTINCT cust_name 
FROM (
    SELECT cust_name FROM Depositor
    UNION 
    SELECT cust_name FROM Borrower
) AS all_customers;


3. Find all customers who have account but no loan at the bank. 
SELECT DISTINCT Depositor.cust_name 
FROM Depositor
WHERE cust_name NOT IN (SELECT cust_name FROM Borrower);

4. Find average account balance at „Wadia College‟ branch. 
SELECT AVG(balance) AS avg_balance 
FROM Account 
WHERE branch_name = 'Wadia College';



5. Find no. of depositors at each branch
SELECT branch_name, COUNT(DISTINCT Depositor.cust_name) AS num_depositors
FROM Account
JOIN Depositor ON Account.acc_no = Depositor.acc_no
GROUP BY branch_name;


(S3)
3333333333333333333333

1. Find the branches where average account balance > 15000. 
SELECT branch_name 
FROM Account
GROUP BY branch_name
HAVING AVG(balance) > 15000;


2. Find number of tuples in customer relation. 
SELECT COUNT(*) AS num_customers 
FROM Customer;

3. Calculate total loan amount given by bank. 
SELECT SUM(amount) AS total_loan_amount 
FROM Loan;


4. Delete all loans with loan amount between 1300 and 1500. 
DELETE FROM Loan 
WHERE amount BETWEEN 1300 AND 1500;


5. Find the average account balance at each branch 
SELECT branch_name, AVG(balance) AS avg_balance 
FROM Account
GROUP BY branch_name;


6. Find name of Customer and city where customer name starts with 
Letter P. 
SELECT cust_name, cust_city 
FROM Customer 
WHERE cust_name LIKE 'P%';


(S7)
44444444444444444444444444444444444444444444
Execute the following query: 
1. Create a View1 to display List all customers in alphabetical 
order who have loan from Pune_Station branch. 
CREATE VIEW View1 AS SELECT DISTINCT Customer.cust_name FROM Customer JOIN Borrower ON Customer.cust_name = Borrower.cust_name JOIN Loan ON Borrower.loan_no = Loan.loan_no WHERE Loan.branch_name = 'Pune_Station' ORDER BY Customer.cust_name;



2. Create View2 on branch table by selecting any two columns and 
perform insert update delete operations. 
CREATE VIEW View2 AS SELECT branch_name, branch_city FROM Branch; INSERT INTO View2 (branch_name, branch_city) VALUES ('New_Branch', 'Pune'); UPDATE View2 SET branch_city = 'Mumbai' WHERE branch_name = 'New_Branch'; DELETE FROM View2 WHERE branch_name = 'New_Branch';


3. Create View3 on borrower and depositor table by selecting any 
one column from each table perform insert update delete 
operations. 
CREATE VIEW View3 AS SELECT Borrower.cust_name, Depositor.acc_no FROM Borrower JOIN Depositor ON Borrower.cust_name = Depositor.cust_name; INSERT INTO View3 (cust_name, acc_no) VALUES ('New_Customer', 'A1001'); UPDATE View3 SET acc_no = 'A1002' WHERE cust_name = 'New_Customer'; DELETE FROM View3 WHERE cust_name = 'New_Customer';



4. Create Union of left and right joint for  all customers who 
have an account or loan or both at bank 
SELECT DISTINCT Customer.cust_name FROM Customer LEFT JOIN Depositor ON Customer.cust_name = Depositor.cust_name LEFT JOIN Borrower ON Customer.cust_name = Borrower.cust_name WHERE Depositor.acc_no IS NOT NULL OR Borrower.loan_no IS NOT NULL UNION SELECT DISTINCT Customer.cust_name FROM Customer RIGHT JOIN Depositor ON Customer.cust_name = Depositor.cust_name RIGHT JOIN Borrower ON Customer.cust_name = Borrower.cust_name WHERE Depositor.acc_no IS NOT NULL OR Borrower.loan_no IS NOT NULL;


5. Create Simple and Unique index. 
CREATE INDEX idx_cust_name ON Customer(cust_name); CREATE UNIQUE INDEX idx_acc_no ON Account(Acc_no);


6. Display index Information.
SHOW INDEX FROM Customer; SHOW INDEX FROM Account;




